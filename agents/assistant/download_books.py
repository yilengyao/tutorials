# filename: download_robot_books.py produced by AutoGen

import requests
from bs4 import BeautifulSoup
import re
import os

# Base URL of Project Gutenberg
BASE_URL = 'https://www.gutenberg.org'

# Function to get the search results page
def search_gutenberg(query):
    search_url = f"{BASE_URL}/ebooks/search/?query={query}"
    response = requests.get(search_url)
    response.raise_for_status()  # Raise an error if the request failed
    return response.text

# Function to parse search results and get ebook links
def get_ebook_links(html_content):
    soup = BeautifulSoup(html_content, 'html.parser')
    return [a['href'] for a in soup.select('li.booklink a[href^="/ebooks/"]')]

# Function to get the download link for a plain text file
def get_download_link(ebook_url):
    return ebook_url + '.txt.utf-8'
    # code below was originally generated by AutoGen
    response = requests.get(BASE_URL + ebook_url)
    response.raise_for_status()
    soup = BeautifulSoup(response.text, 'html.parser')
    link = soup.find('a', href=re.compile(r'.txt$'))
    return link['href'] if link else None

# Function to download and save the plain text file
def download_text_file(download_url, filename):
    response = requests.get(BASE_URL + download_url)
    response.raise_for_status()
    with open(filename, 'w', encoding='utf-8') as file:
        file.write(response.text)

# Main script logic
def main():
    query = 'robots'
    html_content = search_gutenberg(query)
    ebook_links = get_ebook_links(html_content)

    # Create a directory to store the downloaded books
    os.makedirs('gutenberg_robot_books', exist_ok=True)

    for ebook_link in ebook_links:
        download_link = get_download_link(ebook_link)
        if download_link:
            book_id = ebook_link.split('/')[-1]
            filename = f'gutenberg_robot_books/{book_id}.txt'
            print(f'Downloading book ID {book_id}...')
            download_text_file(download_link, filename)
            print(f'Book ID {book_id} downloaded and saved as {filename}.')

if __name__ == '__main__':
    main()